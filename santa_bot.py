import asyncio
import datetime
import logging
import os
import re
import time
import json
import random

from datetime import date, timedelta

from aiogram import types
from aiogram.dispatcher.filters import BoundFilter
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import KeyboardButton
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters import Text
from aiogram.types.message import ContentType
from aiogram.utils.exceptions import TelegramAPIError
import aiogram.utils.markdown as fmt

from dotenv import load_dotenv

load_dotenv()
token = os.getenv("TG_BOT_TOKEN")
loop = asyncio.get_event_loop()
bot = Bot(token=token, parse_mode=types.ParseMode.HTML)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage, loop=loop)
game_data = {}


class RegisterOrder(StatesGroup):
    game_id = State()
    user_name = State()
    user_email = State()
    user_wishlist = State()
    letter_to_santa = State()


@dp.message_handler(commands='start')
@dp.message_handler(text='–û—Ç–º–µ–Ω–∞')
@dp.message_handler(Text(equals="–û—Ç–º–µ–Ω–∞"), state="*")
async def cmd_start(message: types.Message, state: FSMContext):
    if message.text == '–û—Ç–º–µ–Ω–∞':
        await state.finish()
    if not message.text == '/start reg' or message.text == '–û—Ç–º–µ–Ω–∞':
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        keyboard.add(KeyboardButton('–°–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É'))
        await message.answer("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!", reply_markup=keyboard)
    else:
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(KeyboardButton(text='–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'))
        await message.answer(

            fmt.text(
                fmt.text("–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ!\n\n–¢—ã —Å–æ–±–∏—Ä–∞–µ—à—å—Å—è —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∏–≥—Ä–µ:\n\n"),
                fmt.text(f"–ù–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã:   {game_data['name_game']}\n"),
                fmt.text(f"\n–¶–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω –ø–æ–¥–∞—Ä–∫–∞:   {game_data['limit_price']}\n"),
                fmt.text(f"\n–ü–µ—Ä–∏–æ–¥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:   {game_data['date_reg']}\n"),
                fmt.text(f"\n–î–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥–∞—Ä–∫–æ–≤:   {game_data['date_send']}\n")
            ), reply_markup=keyboard

        )


@dp.message_handler(text='–°–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É')
async def create_game(message: types.Message):
    game_data['name_game'] = None
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã")


@dp.callback_query_handler(text='yes')
async def yes_limit(call: types.CallbackQuery):
    keyboard = types.InlineKeyboardMarkup(resize_keyboard=True)
    buttons = [
        types.InlineKeyboardButton(text='500 —Ä', callback_data='500 p'),
        types.InlineKeyboardButton(text='500-1000 —Ä', callback_data='500-1000 p'),
        types.InlineKeyboardButton(text='500-2000 —Ä', callback_data='500-2000 p'),
    ]
    keyboard.row(*buttons)
    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω:", reply_markup=keyboard)
    await call.answer()


@dp.callback_query_handler(text_contains='p')
async def period_reg(call: types.CallbackQuery):
    if re.search(r'\d+', call.data):
        game_data['limit_price'] = call.data
    else:
        game_data['limit_price'] = "–ù–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π!"
    keyboard = types.InlineKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    buttons = [
        types.InlineKeyboardButton(text='–¥–æ 25.12.2021', callback_data='25.12.2021'),
        types.InlineKeyboardButton(text='–¥–æ 31.12.2021', callback_data='31.12.2021'),
    ]
    keyboard.row(*buttons)
    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–æ 12.00 –ú–°–ö:", reply_markup=keyboard)
    await call.answer()


@dp.callback_query_handler(text_contains='2021')
async def date_send(call: types.CallbackQuery):
    game_data['date_reg'] = call.data
    user_date = datetime.datetime(2021, 12, 31)
    date_today = datetime.datetime.today()
    count_date = date_today - user_date
    days = int(count_date.days * -1)
    keyboard = types.InlineKeyboardMarkup(row_width=4, resize_keyboard=True, one_time_keyboard=True)
    col = []
    for i in range(days + 1):
        date_calendar = date_today + timedelta(days=i)
        col.append(date_calendar.day)
    buttons = [
        types.InlineKeyboardButton(
            text=f'{day}',
            callback_data=f'{day}w') for day in col]
    keyboard.add(*buttons)
    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥–∞—Ä–∫–∞:", reply_markup=keyboard)
    await call.answer()


@dp.callback_query_handler(text_contains='w')
async def logging_user(call: types.CallbackQuery):
    choice_day = re.search(r'\d+', call.data).group()
    date_today = datetime.date.today()
    bot_name = await bot.get_me()
    game_data['date_send'] = f'{choice_day}.{date_today.month}.{date_today.year}'
    await call.message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–∞–π–Ω—ã–π –°–∞–Ω—Ç–∞ —É–∂–µ –≥–æ—Ç–æ–≤–∏—Ç—Å—è –∫ —Ä–∞–∑–¥–∞—á–µ –ø–æ–¥–∞—Ä–∫–æ–≤!",
                              reply_markup=types.ReplyKeyboardRemove())
    await call.message.answer(
        fmt.text(
            fmt.text("–ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–æ–≤–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É –∏–≥—Ä—ã –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:\n\n"),
            fmt.text(f'https://t.me/{bot_name.username}?start=reg'),
        )
    )


def validate_email(email):
    regex = r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b'
    return bool(re.fullmatch(regex, email))


def init_db():
    if not os.path.isfile('users.json'):
        users_db = {
            'users': []
        }
        with open('users.json', 'w') as users:
            json.dump(users_db, users)


def add_user(user):
    with open('users.json', 'r') as users:
        users_db = json.load(users)
        print(users_db)
        users_db['users'].append(user)
        print(users_db)


@dp.message_handler(Text(equals="–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è"), state="*")
@dp.message_handler(text='–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è')
async def cmd_register(message: types.Message, state: FSMContext):
    try:
        game_id = game_data['game_id']
        user_id = message['from']['id']
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(KeyboardButton(text='–û—Ç–º–µ–Ω–∞'))
        await state.update_data(game_id=game_id)
        await state.update_data(user_id=user_id)
        await RegisterOrder.user_name.set()
        await message.answer('–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –∏–º—è:', reply_markup=keyboard)
    except IndexError:
        await message.reply('–í–≤–µ–¥–∏—Ç–µ id –∏–≥—Ä—ã.')
        await RegisterOrder.game_id.set()
    except ValueError:
        await message.answer('id –∏–≥—Ä—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º')
        return


@dp.message_handler(state=RegisterOrder.game_id)
async def get_game_id(message: types.Message, state: FSMContext):
    try:
        game_id = int(message.text)
        await state.update_data(game_id=game_id)
        await RegisterOrder.next()
    except ValueError:
        await message.answer('id –∏–≥—Ä—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º')
        return


@dp.message_handler(Text(equals="–ò–∑–º–µ–Ω–∏—Ç—å email"), state="*")
@dp.message_handler(state=RegisterOrder.user_name)
async def get_user_name(message: types.Message, state: FSMContext):
    user_name = message.text
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è'), KeyboardButton(text='–û—Ç–º–µ–Ω–∞'))
    await state.update_data(user_name=user_name)
    await RegisterOrder.next()
    await message.answer('–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ email:', reply_markup=keyboard)


@dp.message_handler(Text(equals="–ò–∑–º–µ–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∂–µ–ª–∞–Ω–∏–π"), state="*")
@dp.message_handler(state=RegisterOrder.user_email)
async def get_user_email(message: types.Message, state: FSMContext):
    user_email = message.text
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å email'), KeyboardButton(text='–û—Ç–º–µ–Ω–∞'))
    if not validate_email(user_email.strip()):
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email')
        return
    await state.update_data(user_email=user_email)
    await RegisterOrder.next()
    await message.answer(
        '–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤–∞—à —Å–ø–∏—Å–æ–∫ –∂–µ–ª–∞–Ω–∏–π (–≤–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–ø, —á—Ç–æ –±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –¥–∞–ª—å—à–µ):', reply_markup=keyboard)


@dp.message_handler(Text(equals="–ò–∑–º–µ–Ω–∏—Ç—å –ø–∏—Å—å–º–æ —Å–∞–Ω—Ç–µ"), state="*")
@dp.message_handler(state=RegisterOrder.user_wishlist)
async def get_user_wishlist(message: types.Message, state: FSMContext):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∂–µ–ª–∞–Ω–∏–π'), KeyboardButton(text='–û—Ç–º–µ–Ω–∞'))
    user_wishlist = message.text
    await state.update_data(user_wishlist=user_wishlist)
    await RegisterOrder.next()
    await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –ø–∏—Å—å–º–æ —Å–∞–Ω—Ç–µ:', reply_markup=keyboard)


@dp.message_handler(state=RegisterOrder.letter_to_santa)
async def write_letter_to_santa(message: types.Message, state: FSMContext):
    letter = message.text
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True,  one_time_keyboard=True)
    keyboard.add(KeyboardButton(text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Å—å–º–æ —Å–∞–Ω—Ç–µ!'), KeyboardButton(text='–û—Ç–º–µ–Ω–∞'))
    await state.update_data(letter_to_santa=letter)
    user_data = await state.get_data()
    add_user(user_data)
    await state.finish()
    await message.answer('üéÖ', reply_markup=keyboard)


@dp.message_handler(text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Å—å–º–æ —Å–∞–Ω—Ç–µ!')
async def wish_sheet(message: types.Message):
    await message.answer('–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ –∏–≥—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã!')
    # with open('users.json', 'r') as users:
    #     users_db = json.load(users)

    # await message.answer()
    # for wish in game_data["user_wishlist"]:
    #     await message.answer(
    #         fmt.text(
    #             fmt.text(wish),
    #         ), reply_markup=types.ReplyKeyboardRemove()
    #     )

# !! it`s final handler____________________________________________________________

@dp.message_handler()
async def name_game(message: types.Message):
    if not game_data['name_game']:
        game_data['name_game'] = message.text
        game_data['game_id'] = random.randint(0, 200)
        await bot.delete_message(message.from_user.id, message.message_id)
        keyboard = types.InlineKeyboardMarkup(resize_keyboard=True)
        button_yes = types.InlineKeyboardButton(text='–î–ê', callback_data='yes')
        button_no = types.InlineKeyboardButton(text='–ù–ï–¢', callback_data='pp')
        keyboard.add(button_yes, button_no)
        await message.answer(f"–î–ª—è –∏–≥—Ä—ã - {game_data['name_game']}\n\n–¢—Ä–µ–±—É–µ—Ç—Å—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ–¥–∞—Ä–∫–∞?",
                             reply_markup=keyboard)


if __name__ == '__main__':
    init_db()
    executor.start_polling(dp, skip_updates=True)

# import random
#
# colleagues = ['A', 'B', 'C', 'D','E', 'F', 'G']
#
# random.shuffle(colleagues)
# offset = [colleagues[-1]] + colleagues[:-1]
# for santa, receiver in zip(colleagues, offset):
#      print(santa, "–î–∞—Ä–∏—Ç –ø–æ–¥–∞—Ä–æ–∫", receiver)


